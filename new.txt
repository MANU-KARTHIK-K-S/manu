PROGRAM--FCFS
#include<stdio.h>
void main()
{
int n,i,at[10],bt[10],p[10],wt[10],ct[10],tat[10],temp;
float avg_wt,avg_tat;
printf("Enter the number of processes\n");
scanf("%d",&n);
printf("Enter the Arrival time for each process\n");
for( i=0;i<n;i++)
{
printf("PROCESS %d\t",i+1)
scanf("%d",&at[i]);
p[i]=i+1;
}
printf("Enter the Burst time for each process\n");
for(i=0;i<n;i++)
{
printf("PROCESS %d\t",i+1);
scanf("%d",&bt[i]);
}
for(i=0;i<n;i++)
{
for(int j=i+1;j<n;j++)
{
if(at[j]<at[i])
{
temp=at[i];
at[i]=at[j];
at[j]=temp;
temp=p[i];
p[i]=p[j];
p[j]=temp;
temp=bt[i];
bt[i]=bt[j];
bt[j]=temp;
}
}
}
wt[0]=0;
ct[0]=at[0];
avg_wt=0;
avg_tat=0;
for(i=1;i<n;i++)
{
ct[i]=ct[i-1]+bt[i-1];
wt[i]=(ct[i]-at[i]);
avg_wt+=wt[i];
if(wt[i]<0)
{
wt[i]=0;
}
}
for ( i = 0; i < n ; i++){
tat[i] = bt[i] + wt[i];
avg_tat+=tat[i];
}
printf("FCFS SCHEDULING\n");
printf("PROCESS ID ARRIVAL TIME \t BURST TIME\t WAITING TIME\t TURN AROUND TIME\n");
for(i=0;i<n;i++)
{
printf("%d\t\t %d\t\t %d\t\t %d\t\t %d\n",p[i],at[i],bt[i],wt[i],tat[i]);
}
avg_wt= (float) avg_wt/n;
avg_tat= (float) avg_tat/n;
printf("The average waiting time is %f\n",avg_wt);
printf("The average Turn around_time is %f",avg_tat);
}
OUTPUT
Enter the number of processes
4
Enter the Arrival time for each process
PROCESS 1 1
PROCESS 2 2
PROCESS 3 3
PROCESS 4 4
Enter the Burst time for each process
PROCESS 1 5
PROCESS 2 7
PROCESS 3 8
PROCESS 4 4
FCFS SCHEDULING
PROCESS ID ARRIVAL TIME BURST TIME WAITING TIME TURN AROUND TIME
1 1 5 0 5
2 2 7 4 11
3 3 8 10 18
4 4 4 17 21
The average waiting time is 7.750000
The average Turn around_time is 13.750000
PROGRAM—SJF
#include<stdio.h>
int main()
{
int bt[20],p[20],wt[20],tat[20],i,j,n,total=0,pos,temp;
float avg_wt,avg_tat;
printf("Enter number of process:");
scanf("%d",&n);
printf("\nEnter Burst Time:\n");
for(i=0;i<n;i++)
{
printf("process%d:",i+1);
scanf("%d",&bt[i]);
p[i]=i+1;
}
for(i=0;i<n;i++)
{
pos=i;
for(j=i+1;j<n;j++)
{
if(bt[j]<bt[pos])
pos=j;
}
temp=bt[i];
bt[i]=bt[pos];
bt[pos]=temp;
temp=p[i];
p[i]=p[pos];
p[pos]=temp;
}
wt[0]=0;
for(i=1;i<n;i++)
{
wt[i]=0;
for(j=0;j<i;j++)
wt[i]+=bt[j];
total+=wt[i];
}
avg_wt=(float)total/n;
total=0;
printf("\nProcess\t Burst Time \tWaiting Time\tTurnaround Time");
for(i=0;i<n;i++)
{
tat[i]=bt[i]+wt[i];
total+=tat[i];
printf("\np%d\t\t %d\t\t %d\t\t\t%d",p[i],bt[i],wt[i],tat[i]);
}
avg_tat=(float)total/n;
printf("\n\nAverage Waiting Time=%f",avg_wt);
printf("\nAverage Turnaround Time=%f\n",avg_tat);}
OUTPUT
Enter number of process:3
Enter Burst Time:
process1:5
process2:3
process3:7
Process Burst Time Waiting Time Turnaround Time
p2 3 0 3
p1 5 3 8
p3 7 8 15
Average Waiting Time=3.666667
Average Turnaround Time=8.666667
PROGRAM-PRIORITY
#include<stdio.h>
int main()
{
int bt[20],p[20],wt[20],tat[20],pr[20],i,j,n,total=0,pos,temp;
float avg_wt,avg_tat;
printf("Enter Total Number of Process:");
scanf("%d",&n);
printf("\nEnter Burst Time and Priority\n");
for(i=0;i<n;i++)
{
printf("\nP[%d]\n",i+1);
printf("Burst Time:");
scanf("%d",&bt[i]);
printf("Priority:");
scanf("%d",&pr[i]);
p[i]=i+1;
}
for(i=0;i<n;i++)
{
pos=i;
for(j=i+1;j<n;j++)
{
if(pr[j]<pr[pos])
pos=j;
}
temp=pr[i];
pr[i]=pr[pos];
pr[pos]=temp;
temp=bt[i];
bt[i]=bt[pos];
bt[pos]=temp;
temp=p[i];
p[i]=p[pos];
p[pos]=temp;
}
wt[0]=0;
for(i=1;i<n;i++)
{
wt[i]=0;
for(j=0;j<i;j++)
wt[i]+=bt[j];
total+=wt[i];
}
avg_wt=total/n;
total=0;
printf("\nProcess\t Burst Time \tWaiting Time\tTurnaround Time");
for(i=0;i<n;i++)
{
tat[i]=bt[i]+wt[i];
total+=tat[i];
printf("\nP[%d]\t\t %d\t\t %d\t\t\t%d",p[i],bt[i],wt[i],tat[i]);
}
avg_tat=total/n;
printf("\n\nAverage Waiting Time=%f",avg_wt);
printf("\nAverage Turnaround Time=%f\n",avg_tat);
return 0;
}
OUTPUT
Enter Total Number of Process:3
Enter Burst Time and Priority
P[1]
Burst Time:4
Priority:1
P[2]
Burst Time:5
Priority:3
P[3]
Burst Time:7
Priority:1
Process Burst Time Waiting Time Turnaround Time
P[1] 4 0 4
P[3] 7 4 11
P[2] 5 11 16
Average Waiting Time=5.000000
Average Turnaround Time=10.000000
PROGRAM ROUND ROBIN
#include <stdio.h>
struct process{
int process;
int burstTime;
} pr[20];
void main(){
int i, n, q, tat[20], wt[20], rt[20],tot_tat=0, tot_wt=0,finish,t=0;
printf("Enter number of process : ");
scanf("%d", &n);
printf("Enter the burst Time\n");
for (i = 0; i < n; i++){
printf("Process %d : ", i + 1);
scanf("%d", &pr[i].burstTime);
rt[i] = pr[i].burstTime;
pr[i].process = i + 1;
}
printf("Enter the Quantum value : ");
scanf("%d",&q);
printf("\nProcess\t\tBurst Time\t\tRemaining Time\t\tCompleted Time");
while(1){
finish=1;
for(i=0;i<n;i++){
if(rt[i]!=0){
finish=0;
if(rt[i]>q){
t+=q;
rt[i]-=q;
printf("\n%d\t\t%d\t\t\t%d\t\t\t%d",pr[i].process,pr[i].burstTime,rt[i],q);
}
else{
t=t+rt[i];
int temp = rt[i];
wt[i]=t-pr[i].burstTime;
rt[i]=0;
printf("\n%d\t\t%d\t\t\t%d\t\t\t%d",pr[i].process,pr[i].burstTime,rt[i],temp);
}
}
}
if(finish==1)
break;
}
for(i=0;i<n;i++){
tat[i] = wt[i] + pr[i].burstTime;
tot_tat += tat[i];
tot_wt += wt[i];
}
printf("\n\nProcess\t\tBurst Time\t\tWaiting Time\t\tTurnAround Time");
for (i = 0; i < n; i++)
printf("\nProcess[%d]\t\t%d\t\t%d\t\t\t%d", pr[i].process, pr[i].burstTime, wt[i], tat[i]);
printf("\n\nAverage Waiting Time = %0.2f", (float)tot_wt / n);
printf("\nAverage TurnAround Time = %0.2f\n", (float)tot_tat / n);
}
OUTPUT
Enter number of process : 3
Enter the burst Time
Process 1 : 9
Process 2 : 5
Process 3 : 8
Enter the Quantum value : 4
Process Burst Time Remaining Time Completed Time
1 9 5 4
2 5 1 4
3 8 4 4
1 9 1 4
2 5 0 1
3 8 0 4
1 9 0 1
Process Burst Time Waiting Time TurnAround Time
Process[1] 9 13 22
Process[2] 5 12 17
Process[3] 8 13 21
Average Waiting Time = 12.67
Average TurnAround Time = 20.00
PROGRAM –BANKERS
#include<stdio.h>
void main(){
int n;
int m;
printf("Enter the no.of process :");
scanf("%d",&n);
printf("Enter the no.of instance :");
scanf("%d",&m);
int alloc[n][m];
int max[n][m];
int avail[n][m];
int need[n][m];
int process[n];
int safe[n];
int i;
int j;
printf("Enter the Allocation matrix");
for(i=0;i<n;i++){
for(j=0;j<m;j++){
scanf("%d",&alloc[i][j]);
}
process[i]=0;
}
printf("Enter the Max matrix");
for(i=0;i<n;i++){
for(j=0;j<m;j++){
scanf("%d",&max[i][j]);
}
}
printf("Enter %d instance for Avail: ",m);
for(i=0;i<m;i++){
scanf("%d",&avail[0][i]);
}
for(i=0;i<n;i++){
for(j=0;j<m;j++){
need[i][j]=max[i][j]-alloc[i][j];
}
}
int comp=0;
int iavail=0;
int f;
int s=-1;
while(comp<n){
f=0;
for(i=0;i<n;i++){
if(process[i]==1)
continue;
for(j=0;j<m;j++){
if(need[i][j]>avail[iavail][j]){
break;
}
if(j==m-1){
process[i]=1;
iavail++;
for(j=0;j<m;j++){
avail[iavail][j]=avail[iavail-1][j]+alloc[i][j];
}
comp++;
f=1;
safe[++s]=i+1;
break;
}
if(f==0){
break;
}
}
printf("\n Need Matrix \n");
for(i=0;i<n;i++){
for(j=0;j<m;j++){
printf("%d ",need[i][j]);
}
printf("\n");
}
if(s==n-1){
printf("\n Available Matrix \n");
for(i=0;i<n;i++){
for(j=0;j<m;j++){
printf("%d ",avail[i][j]);
}
printf("\n");
}
printf("\nsafe sequence : ");
for(i=0;i<=s;i++){
printf("P%d ",safe[i]);
}
else{
printf("\nNot in safe state!!");
}
}
OUTPUT
Enter the no.of process :5
Enter the no.of instance :3
Enter the Allocation matrix 0 1 0 2 0 0 3 0 2 2 1 1 0 0 2
Enter the Max matrix 7 5 3 3 2 2 9 0 2 2 2 2 4 3 3
Enter 3 instance for Avail: 3 3 2
Need Matrix
7 4 3
1 2 2
6 0 0
0 1 1
4 3 1
Available Matrix
3 3 2
5 3 2
7 4 3
7 4 5
7 5 5
Safe sequence : P2→ P4→ P5→ P1→ P3
PROGRAM – FCFS DS
#include<stdio.h>
int main()
{
int i,j,sum=0,n;
int ar[20],tm[20];
int disk;
printf("enter number of request :");
scanf("%d",&n);
printf("enter position of head : ");
scanf("%d",&disk);
printf("enter elements of request queue : \n");
for(i=0;i<n;i++)
{
scanf("%d",&ar[i]);
tm[i]=disk-ar[i];
if(tm[i]<0)
{
tm[i]=ar[i]-disk;
}
disk=ar[i];
sum=sum+tm[i];
}
printf("\Total head Movement : %d",sum);
return 0;
}
OUTPUT
enter number of requests :5
enter position of head : 20
enter elements of request queue :
15
34
39
45
60
Total head Movement : 50
PROGRAM – SCAN_DS
#include<stdio.h>
int main()
{
int i,j,sum=0,n;
int d[20];
int disk;
int temp,max;
int dloc;
printf("enter number of location\t");
scanf("%d",&n);
printf("enter position of head\t");
scanf("%d",&disk);
printf("enter elements of disk queue\n");
for(i=0;i<n;i++)
{
scanf("%d",&d[i]);
}
d[n]=disk;
n=n+1;
for(i=0;i<n;i++)
{
for(j=i;j<n;j++)
{
if(d[i]>d[j])
{
temp=d[i];
d[i]=d[j];
d[j]=temp;
}
}
}
max=d[n];
for(i=0;i<n;i++)
{
if(disk==d[i]) { dloc=i; break; }
}
for(i=dloc;i>=0;i--)
{
printf("%d -->",d[i]);
}
printf("0 -->");
for(i=dloc+1;i<n;i++)
{
printf("%d-->",d[i]);
}
sum=disk+max;
printf("\nmovement of total cylinders %d",sum);
return 0;
}
OUTPUT
Enter no of location 8
Enter position of head 53
Enter elements of disk queue
98 183 37 122 14 124 65 67
53->37->14->0->65->67->98->122->124->183
Movement of total cylinders 236
PROGRAM – C SCAN
#include<stdio.h>
#include<stdlib.h>
int main()
{
int RQ[100],i,j,n,TotalHeadMoment=0,initial,size,move;
printf("Enter the number of Requests\n");
scanf("%d",&n);
printf("Enter the Requests sequence\n");
for(i=0;i<n;i++)
scanf("%d",&RQ[i]);
printf("Enter initial head position\n");
scanf("%d",&initial);
printf("Enter total disk size\n");
scanf("%d",&size);
printf("Enter the head movement direction for high 1 and for low 0\n");
scanf("%d",&move);
for(i=0;i<n;i++)
{
for( j=0;j<n-i-1;j++)
{
if(RQ[j]>RQ[j+1])
{
int temp;
temp=RQ[j];
RQ[j]=RQ[j+1];
RQ[j+1]=temp;
}
}
}
int index;
for(i=0;i<n;i++)
{
if(initial<RQ[i])
{
index=i;
break;
}
}
if(move==1)
{
for(i=index;i<n;i++)
{
TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
initial=RQ[i];
}
TotalHeadMoment=TotalHeadMoment+abs(size-RQ[i-1]-1);
TotalHeadMoment=TotalHeadMoment+abs(size-1-0);
initial=0;
for( i=0;i<index;i++)
{
TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
initial=RQ[i];
}
}
else
{
for(i=index-1;i>=0;i--)
{
TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
initial=RQ[i];
}
TotalHeadMoment=TotalHeadMoment+abs(RQ[i+1]-0);
TotalHeadMoment=TotalHeadMoment+abs(size-1-0);
initial =size-1;
for(i=n-1;i>=index;i--)
{
TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
initial=RQ[i];
}
}
printf("Total head movement is %d",TotalHeadMoment);
return 0;
}
OUTPUT
Enter the number of Request
8
Enter the Requests Sequence
95 180 34 119 11 123 62 64
Enter initial head position
50
Enter total disk size
200
Enter the head movement direction for high 1 and for low 0
1
Total head movement is 382
Program[Pass1]:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
void main()
{
FILE *optab, *symtab, *symtabread, *interFile, *prgrmFile, *lenFile, *tempFile;
remove("symtab.txt");
symtab = fopen("symtab.txt", "a");
interFile = fopen("interFile.txt", "w");
prgrmFile = fopen("prgrmFile.txt", "r");
lenFile = fopen("lenFile.txt", "w");
char label[10], opcode[10], operand[10], symbol[10], mnemonic[10], temp[10];
int locctr, start, found_opcode, symflag;
fscanf(prgrmFile, "%s\t%s\t%s", label, opcode, operand);
if (strcmp(opcode, "START") == 0)
{
tempFile = fopen("tempFile.txt", "w");
fprintf(tempFile, "%s", operand);
fclose(tempFile);
tempFile = fopen("tempFile.txt", "r");
fscanf(tempFile, "%x", &locctr);
fclose(tempFile);
start = locctr;
fprintf(interFile, "**\t%s\t%s\t%s\n", label, opcode, operand);
fscanf(prgrmFile, "%s\t%s\t%s", label, opcode, operand);
}
else
{
locctr = 0x0;
start = 0x0;
}
while (!feof(prgrmFile))
{
if (strcmp(opcode, "END") != 0)
fprintf(interFile, "%x\t", locctr);
else
fprintf(interFile, "**\t**");
symflag = 0;
if (strcmp(label, "**") != 0)
{
symflag = 1;
fclose(symtab);
symtabread = fopen("symtab.txt", "r");
while (!feof(symtabread))
{
fscanf(symtabread, "%s\t%s", symbol, temp);
//printf("in symtab search : %s\n",symbol);
if (strcmp(symbol, label) == 0)
{
printf("error :duplicate symnbol found ; %s", symbol);
exit(1);
}
}
symtab = fopen("symtab.txt", "a");
}
if (symflag == 1)
fprintf(symtab, "%s\t%x\n", label, locctr);
found_opcode = 0;
optab = fopen("optab.txt", "r");
while (!feof(optab)) {
fscanf(optab, "%s", mnemonic);
if (strcmp(mnemonic, opcode) == 0) {
found_opcode = 1;
locctr += 0x3;
break;
}
}
fclose(optab);
if (found_opcode == 0 && strcmp(opcode, "END") != 0)
{
if (strcmp(opcode, "BYTE") == 0)
locctr += 0x1;
else if (strcmp(opcode, "RESB") == 0)
locctr += atoi(operand);
else if (strcmp(opcode, "WORD") == 0)
locctr += 0x3;
else if (strcmp(opcode, "RESW") == 0)
locctr += (atoi(operand) * 3);
else
{
printf("invalid opcode found : %s", opcode);
exit(1);
}
}
else if (strcmp(opcode, "END") == 0) {
fprintf(interFile, "\t%s\t%s", opcode, operand);
fprintf(lenFile, "%x", locctr - start);
exit(0);
}
fprintf(interFile, "%s\t%s\t%s\n", label, opcode, operand);
fscanf(prgrmFile, "%s\t%s\t%s", label, opcode, operand);
}
fclose(interFile);
fclose(prgrmFile);
fclose(symtab);
fclose(symtabread);
fclose(optab);
}
INPUT :
prgrmFile.txt
SUM START 1000
FIRST LDX ZERO
** LDA ZERO
LOOP ADD X
** TIX COUNT
** JLT LOOP
** STA TOTAL
COUNT RESW 1
ZERO WORD 0
X WORD 5
TOTAL RESW 1
** END FIRST
OUTPUT
lenFile.txt
21
interfile.txt
** SUM START 1000
1000 FIRST LDX ZERO
1003 ** LDA ZERO
1006 LOOP ADD X
1009 ** TIX COUNT
100c ** JLT LOOP
100f ** STA TOTAL
1012 COUNT RESW 1
1015 ZERO WORD 0
1018 X WORD 5
101b TOTAL RESW 1
** ** END FIRST
symtab.txt
FIRST 1000
LOOP 1006
COUNT 1012
ZERO 1015
X 1018
TOTAL 101b
Program [Pass1]:
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
void main(){
FILE *output,*interFile,*lenFile,*optab,*symtab;
Char address[10],label[10],opcode[10],operand[10],len[5],mnemonic[10],mnemonic_val[5],symbol[10],
symbol_val[10];
int opcode_found,counter=0,ignore=0,constant=0,sym_found,length;
interFile=fopen("interFile.txt","r");
output=fopen("output.txt","w");
lenFile=fopen("lenFile.txt","r");
fscanf(interFile,"%s\t%s\t%s\t%s",address,label,opcode,operand);
fscanf(lenFile,"%s",len);
length=atoi(len);
if(strcmp(opcode,"START")==0){
fprintf(output,"H^%s^%.6d^%.6d\n",label,atoi(operand),length);
printf("H^%s^%s^%s",label,operand,len);
fscanf(interFile,"%s\t%s\t%s\t%s",address,label,opcode,operand);
}
while (!feof(interFile))
{
if(strcmp(opcode,"END")==0){
fprintf(output,"\nE^%.6d",atoi(operand));
printf("\nE^%.6d",atoi(operand));
exit(1);
}
optab=fopen("optab.txt","r");
opcode_found=0;
while(!feof(optab)){
fscanf(optab,"%s\t%s",mnemonic,mnemonic_val);
if(strcmp(mnemonic,opcode)==0){
opcode_found=1;
break;
}
}
fclose(optab);
if(opcode_found==0){
ignore=0;
constant=0;
if(strcmp(opcode,"WORD")==0 || strcmp(opcode,"BYTE")==0){
strcpy(mnemonic_val,operand);
opcode_found=1;
constant=1;
counter++;
}else if(strcmp(opcode,"RESB")==0 || strcmp(opcode,"RESW")==0){
ignore=1;
}else{
printf("invalid opcode found!!");
exit(1);
}
}
if(ignore==0){
if(constant==0){
symtab=fopen("symtab.txt","r");
sym_found=0;
while(!feof(symtab)){
fscanf(symtab,"%s\t%s",symbol,symbol_val);
if(strcmp(operand,symbol)==0){
strcat(mnemonic_val,symbol_val);
sym_found=1;
counter++;
break;
}
}
if(sym_found==0){
printf("invalid symbol found: %s",operand);
exit(1);
}
fclose(symtab);
}
if(counter>10)
counter=1;
if(counter==1){
fprintf(output,"\nT^%.6d^1E^",atoi(address));
printf("\nT^%s^1E",address);
}
fprintf(output,"%.6d^",atoi(mnemonic_val));
printf("^%s",mnemonic_val);
}
fscanf(interFile,"%s\t%s\t%s\t%s",address,label,opcode,operand);
if(strcmp(opcode,"END")==0){
fprintf(output,"\nE^%.6d",atoi(operand));
printf("\nE^%s",operand);
exit(1);
}
}
fclose(interFile);
fclose(output);
fclose(symtab);
fclose(optab);
fclose(lenFile);
}
INPUT
lenFile.txt
21
interfile.txt
** SUM START 1000
1000 FIRST LDX ZERO
1003 ** LDA ZERO
1006 LOOP ADD X
1009 ** TIX COUNT
100c ** JLT LOOP
100f ** STA TOTAL
1012 COUNT RESW 1
1015 ZERO WORD 0
1018 X WORD 5
101b TOTAL RESW 1
** ** END FIRST
OUTPUT
output.txt
H^SUM^001000^000021
T^001000^1E^141015^091015^121018^081012^101006^011101^000000^000005^
E^000000
PROGRAM
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
void main()
{
FILE *objcode, *tempFile;
objcode = fopen("objcode.txt", "r");
char record[200], address[10];
int i, start, count = 0, j = 0, change = 0;
fscanf(objcode, "%s", record);
for (i = 0; record[i] != '\0'; i++)
{
if (record[i] == '^')
count++;
if (count == 2 && record[i] != '^')
address[j++] = record[i];
if (count == 3)
break;
}
tempFile = fopen("tempFile.txt", "w");
fprintf(tempFile, "%s", address);
fclose(tempFile);
tempFile = fopen("tempFile.txt", "r");
fscanf(tempFile, "%x", &start);
fclose(tempFile);
fscanf(objcode, "%s", record);
printf("adress\tobjectCode");
while (record[0] != 'E' && !feof(objcode))
{
count = 0;
change = 0;
for (i = 0; record[i] != '\0'; i++)
{
if (record[i] == '^')
count++;
if (count >= 3 && record[i] != '^')
{
if (change == 0)
{
printf("\n%x\t", start);
start += 1;
}
printf("%c", record[i]);
change = !change;
}
}
fscanf(objcode, "%s", record);
}
fclose(objcode);
}
RECORD FILE
H^SUM^1000^21
T^5^1E^141015^091015^121018^081012^101006^11101b^0^5
E^FIRST
OUTPUT
1000 14
1001 10
1002 15
1003 09
1004 10
1005 15
1006 12
1007 10
1008 18
1009 08
100a 10
100b 12
100c 10
100d 10
100e 06
100f 11
1010 10
1011 1b
1012 05
PROGRAM
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
void convert(char h[12]);
char bitmask[12];
char bit[12] = {0};
void main()
{
char input[10], binary[12], relocbit, ch, pn[5];
int start, inp, len, i, address, opcode, addr, actualadd, tlen, add, length;
FILE *reloc_in, *reloc_out;
printf("\n\n Enter the actual starting address : ");
scanf("%x", &start);
reloc_in = fopen("RLIN.txt", "r");
reloc_out = fopen("RLOUT.txt", "w");
fscanf(reloc_in, "%s", input);
fprintf(reloc_out, " ----------------------------\n");
fprintf(reloc_out, " ADDRESS\tCONTENT\n");
fprintf(reloc_out, " ----------------------------\n");
while (strcmp(input, "E") != 0)
{
if (strcmp(input, "H") == 0)
{
fscanf(reloc_in, "%s", pn);
fscanf(reloc_in, "%x", &add);
fscanf(reloc_in, "%x", &length);
fscanf(reloc_in, "%s", input);
}
if (strcmp(input, "T") == 0)
{
fscanf(reloc_in, "%x", &address);
fscanf(reloc_in, "%x", &tlen);
fscanf(reloc_in, "%s", bitmask);
address += start;
convert(bitmask);
len = strlen(bit);
if (len >= 11)
len = 10;
for (i = 0; i < len; i++)
{
fscanf(reloc_in, "%x", &opcode);
fscanf(reloc_in, "%x", &addr);
relocbit = bit[i];
if (relocbit == '0')
actualadd = addr;
else
actualadd = addr + start;
fprintf(reloc_out, "\n %x\t\t%x%x\n", address, opcode, actualadd);
address += 3;
}
fscanf(reloc_in, "%s", input);
}
}
fprintf(reloc_out, " ----------------------------\n");
fclose(reloc_in);
fclose(reloc_out);
printf("\n\n The contents of output file(RLOUT.TXT) \n");
reloc_out = fopen("RLOUT.txt", "r");
ch = fgetc(reloc_out);
while (ch != EOF)
{
printf("%c", ch);
ch = fgetc(reloc_out);
}
fclose(reloc_out);
}
void convert(char h[12])
{
int i, l;
strcpy(bit, "");
l = strlen(h);
for (i = 0; i < l; i++)
{
switch (h[i])
{
case '0':
strcat(bit, "0");
break;
case '1':
strcat(bit, "1");
break;
case '2':
strcat(bit, "10");
break;
case '3':
strcat(bit, "11");
break;
case '4':
strcat(bit, "100");
break;
case '5':
strcat(bit, "101");
break;
case '6':
strcat(bit, "110");
break;
case '7':
strcat(bit, "111");
break;
case '8':
strcat(bit, "1000");
break;
case '9':
strcat(bit, "1001");
break;
case 'A':
strcat(bit, "1010");
break;
case 'B':
strcat(bit, "1011");
break;
case 'C':
strcat(bit, "1100");
break;
case 'D':
strcat(bit, "1101");
break;
case 'E':
strcat(bit, "1110");
break;
case 'F':
strcat(bit, "1111");
break;
}
}
}
RECORD FILE
H COPY 000000 00107A
T 000000 1E FFC 14 0033 48 1039 10 0036 28 0030 30 0015 48 1061 3C 0003 20 002A 1C 0039 30 002D
T 002500 15 E00 1D 0036 48 1061 18 0033 4C 1000 80 1000 60 1003
E 000000
OUTPUT
Enter the actual starting address : 4000
The contents of output file(RLOUT.TXT)
----------------------------
ADDRESS CONTENT
----------------------------
4000 144033
4003 485039
4006 104036
4009 284030
400c 304015
400f 485061
4012 3c4003
4015 20402a
4018 1c4039
401b 30402d
6500 1d4036
6503 485061
6506 184033
6509 4c1000
650c 801000
650f 601003
----------------------------
PROGRAM
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
void main()
{
FILE *input, *output, *nametab, *deftab;
remove("nametab.txt");
input = fopen("macroInput.txt", "r");
output = fopen("macroOut.txt", "w");
nametab = fopen("nametab.txt", "w");
deftab = fopen("deftab.txt", "w");
char label[20], opcode[20], operand[20], parameter[20], args[20], name[20];
int pos, length, isCall, arglen, isarg;
fscanf(input, "%s\t%s\t%s", label, opcode, operand);
if (strcmp(opcode, "START") == 0)
{
fprintf(output, "%s\t%s\t%s\n", label, opcode, operand);
fscanf(input, "%s\t%s\t%s", label, opcode, operand);
}
while (!feof(input))
{
if (strcmp(opcode, "MACRO") == 0)
{
fprintf(deftab, "%s\t%s\t%s\n", label, opcode, operand);
length = 0;
if (strcmp(operand, "**") != 0)
{
for (int i = 0; operand[i] != '\0'; i++)
{
if (operand[i] != '&' && operand[i] != ',' && operand[i] != ' ')
parameter[length++] = operand[i];
parameter[length] = '\0';
}
}
fclose(nametab);
nametab = fopen("nametab.txt", "r");
while (!feof(nametab))
{
fscanf(nametab, "%s\t%d", name, &arglen);
if (strcmp(name, label) == 0)
{
printf("duplicate macro name found : %s ", label);
exit(0);
}
}
fclose(nametab);
nametab = fopen("nametab.txt", "a");
fprintf(nametab, "%s\t%d\n", label, length);
fscanf(input, "%s\t%s\t%s", label, opcode, operand);
while (strcmp(opcode, "MEND") != 0)
{
pos = 0;
for (int i = 0; i < length; i++)
{
if (parameter[i] == operand[1])
{
pos = i + 1;
break;
}
}
if (pos > 0)
fprintf(deftab, "%s\t%s\t%d\n", label, opcode, pos);
else
fprintf(deftab, "%s\t%s\t%s\n", label, opcode, operand);
fscanf(input, "%s\t%s\t%s", label, opcode, operand);
if (strcmp(opcode, "MEND") == 0)
fprintf(deftab, "%s\t%s\t%s\n", label, opcode, operand);
}
}
else
{
if (strcmp(opcode, "END") != 0)
{
fclose(nametab);
nametab = fopen("nametab.txt", "r");
isCall = 0;
while (!feof(nametab))
{
fscanf(nametab, "%s\t%d", name, &arglen);
if (strcmp(name, opcode) == 0)
{
isCall = 1;
break;
}
}
if (isCall == 1)
{
fprintf(output, "%s\t.%s\t%s\n", label, opcode, operand);
if (arglen > 0 && strcmp(operand, "**") != 0 && operand[0] != '\0')
{
int j = 0;
for (int i = 0; i < strlen(operand); i++)
{
if (operand[i] != ',' && operand[i] != ' ')
args[j++] = operand[i];
}
args[j] = '\0';
}
else
{
printf("arguments expected for the macro call %s", opcode);
exit(0);
}
fclose(deftab);
deftab = fopen("deftab.txt", "r");
while (!feof(deftab))
{
fscanf(deftab, "%s\t%s\t%s", label, opcode, operand);
if (strcmp(label, name) == 0)
{
fscanf(deftab, "%s\t%s\t%s", label, opcode, operand);
while (strcmp(opcode, "MEND") != 0)
{
isarg = 1;
for (int i = 0; i < strlen(operand); i++)
{
if (!isdigit(operand[i])){
isarg = 0;
break;
}
}
if (isarg == 1)
fprintf(output, "%s\t%s\t%c\n", label, opcode, args[atoi(operand) - 1]);
else
fprintf(output, "%s\t%s\t%s\n", label, opcode, operand);
fscanf(deftab, "%s\t%s\t%s", label, opcode, operand);
}
}
}
}
else
fprintf(output, "%s\t%s\t%s\n", label, opcode, operand);
}
}
fscanf(input, "%s\t%s\t%s", label, opcode, operand);
if (strcmp(opcode, "END") == 0)
{
fprintf(output, "%s\t%s\t%s", label, opcode, operand);
break;
}
}
}
MACROINPUT
PGM START 0
ABC MACRO &A,&B
** STA &A
** STB &B
** MEND **
DEF MACRO &F,&T
** STA &F
** STB &T
** MEND **
** ABC P,Q
** ABC p,Q
** DEF R,S
** END **
MACROOUTPUT
PGM START 0
** .ABC P,Q
** STA P
** STB Q
** .ABC p,Q
** STA p
** STB Q
** .DEF R,S
** STA R
** STB S
** END **